apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.seckill.english"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    // 签名信息
    signingConfigs {
        release {
            storeFile file('../sec-english.jks')
            storePassword "123456"
            keyAlias "english"
            keyPassword "123456"
        }
        debug {
            storeFile file('../sec-english.jks')
            storePassword "123456"
            keyAlias "english"
            keyPassword "123456"
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // 风味维度
    flavorDimensions 'environment'

    // 产品风味
    productFlavors {
        alpha {
            dimension 'environment'
            // 区分环境：测试环境地址
            buildConfigField 'String', 'BASE_URL', "\"http://localhost.alpha:8080/\""
            manifestPlaceholders = [
                    app_name: "730测试-α"
            ]
        }
        beta {
            dimension 'environment'
            // 区分环境：开发环境地址
            buildConfigField 'String', 'BASE_URL', "\"http://localhost.beta:8080/\""
            manifestPlaceholders = [
                    app_name: "730测试-β"
            ]
        }
    }

    // 更改apk打包后的名称
    android.applicationVariants.all { variant ->
        // 不加这个判断，debug运行会找不到文件
        if (variant.buildType.name == 'release') {
            variant.outputs.all {
                // 默认生成到app目录下，修改路径到app/build/apk下
                def dir = new File(project.buildDir.absolutePath + "/apk")
                variant.getPackageApplicationProvider().get().outputDirectory = dir
                def date = new Date().format("yyyyMMdd_HH-mm", TimeZone.getTimeZone("GMT+08"))
                def variantName = variant.name.replace('Release', '')
                outputFileName = "app-${variantName}-${variant.versionName}-${date}.apk"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation project(':sec-common')
    implementation project(':sec-push')

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

// Firebase
apply plugin: 'com.google.gms.google-services'